{"version":3,"sources":["components/Color/Color.js","components/Eraser/Eraser.js","components/Controls/Controls.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Color","props","useState","displayed","setDisplayed","color","setColor","className","onClick","title","icon","faPalette","style","position","zIndex","top","right","bottom","left","onChange","pickerColor","hex","handleColor","Eraser","faEraser","e","preventDefault","Controls","Board","canvasRef","React","useRef","parentRef","ctx","setCtx","x","y","canvasOffset","setCanvasOffset","drawing","setDrawing","setPosition","useEffect","canv","current","width","offsetWidth","height","offsetHeight","canvCtx","getContext","lineJoin","lineCap","lineWidth","offset","getBoundingClientRect","parseInt","ref","onMouseDown","clientX","clientY","onMouseUp","onMouseMove","mousex","mousey","strokeStyle","beginPath","moveTo","lineTo","stroke","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8f77be0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPalette } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Color(props) {\n  const popover = {\n    position: \"absolute\",\n    zIndex: \"2\",\n  };\n  const cover = {\n    position: \"fixed\",\n    top: \"0px\",\n    right: \"0px\",\n    bottom: \"0px\",\n    left: \"0px\",\n  };\n  const [displayed, setDisplayed] = useState(false);\n  const [color, setColor] = useState(\"#000000\");\n\n  function handleClick() {\n    setDisplayed(true);\n  }\n\n  function handleClose() {\n    setDisplayed(false);\n  }\n\n  function handleChange(pickerColor) {\n    setColor(pickerColor.hex);\n    props.handleColor(pickerColor.hex);\n  }\n\n  return (\n    <div className=\"color\">\n      <FontAwesomeIcon\n        onClick={handleClick}\n        title=\"choose color\"\n        className=\"fa-icon\"\n        icon={faPalette}\n      />\n      {displayed ? (\n        <div style={popover}>\n          <div style={cover} onClick={handleClose} />\n          <ChromePicker color={color} onChange={handleChange} />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Color;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEraser } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Eraser(props) {\n  function handleEraser(e) {\n    e.preventDefault();\n    props.handleColor(\"#ffffff\");\n  }\n\n  return (\n    <div className=\"eraser\">\n      <FontAwesomeIcon\n        title=\"erase\"\n        icon={faEraser}\n        className=\"fa-icon\"\n        onClick={handleEraser}\n      />\n    </div>\n  );\n}\n\nexport default Eraser;\n","import React from \"react\";\nimport \"./Controls.css\";\nimport Color from \"../Color/Color\";\nimport Eraser from \"../Eraser/Eraser\";\n\nfunction Controls(props) {\n  return (\n    <div className=\"controls\">\n      <Color handleColor={props.handleColor} />\n      <Eraser handleColor={props.handleColor} />\n    </div>\n  );\n}\n\nexport default Controls;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Board.css\";\nimport Controls from \"../Controls/Controls\";\n\nfunction Board() {\n  const canvasRef = React.useRef(null);\n  const parentRef = React.useRef(null);\n  const [ctx, setCtx] = useState({});\n  const [canvasOffset, setCanvasOffset] = useState({ x: 0, y: 0 });\n  const [drawing, setDrawing] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [color, setColor] = useState(\"#000000\");\n\n  useEffect(() => {\n    let canv = canvasRef.current;\n    canv.width = parentRef.current.offsetWidth;\n    canv.height = parentRef.current.offsetHeight;\n\n    let canvCtx = canv.getContext(\"2d\");\n    canvCtx.lineJoin = \"round\";\n    canvCtx.lineCap = \"round\";\n    canvCtx.lineWidth = 5;\n    setCtx(canvCtx);\n\n    let offset = canv.getBoundingClientRect();\n    setCanvasOffset({ x: parseInt(offset.left), y: parseInt(offset.top) });\n  }, [ctx]);\n\n  function handleMouseDown(e) {\n    setDrawing(true);\n    setPosition({\n      x: parseInt(e.clientX - canvasOffset.x),\n      y: parseInt(e.clientY - canvasOffset.y),\n    });\n  }\n  function handleMouseUp() {\n    setDrawing(false);\n  }\n\n  function handleMouseMove(e) {\n    let mousex = e.clientX - canvasOffset.x;\n    let mousey = e.clientY - canvasOffset.y;\n    if (drawing) {\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(position.x, position.y);\n      ctx.lineTo(mousex, mousey);\n      ctx.stroke();\n    }\n    setPosition({ x: mousex, y: mousey });\n  }\n\n  function handleColor(color) {\n    setColor(color);\n  }\n\n  return (\n    <div className=\"board\" ref={parentRef}>\n      <Controls handleColor={handleColor} />\n      <canvas\n        ref={canvasRef}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        onMouseMove={handleMouseMove}\n      />\n    </div>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board/Board\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}